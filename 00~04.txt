[04.29]

[00]
중요한 대부분의 프로그램들은
BackGround에서 실행되고 있다
- Console Application

Main() 에서 프로그램이 시작된다

using 네임스페이스
ex) using System;
System = 보따리
보따리 안에는 다양한 툴이 들어가 있다
누군가 정리를 해 놓은 것이다
이것들을 꺼내서 쓰기 위해서
using이라는 키워드를 쓰는 것이다

namespace _01__HelloWorld
{
    internal class Program
    {
        static void Main(string[] args)
        {
        }
    }
}

해석)
namespace _01__HelloWorld
_01__HelloWorld 라는 보따리
그 안에 class Program 라는 보따리가 또 있음
그 안에 여러가지 기능들이 있음
그중에 하나가 static void Main(string[] args){} - 함수
Main은 하나만 있는 특별한 함수
window os가 Main에 접근해서
안의 내용들을 하나하나씩 실행함

[01]
label
속성) name
label에 접근할때
이름이 필요함
그래서 중복일 수 없음
속성창의 아이콘
1) 항목별로 묶어서 보여준다
2) 사전순으로 정렬해서 보여준다
3) properties 속성들을 나열한다
4) 해당 컨트롤이 가질 수 있는 이벤트
> 윈도우 프로그램
이벤트가 발생하면
운영체제가 이벤트를 처리하는
펑션을 찾아서 실행하고 기다린다

DragDrop
> 레이블을 옮기는게 아니고
어떤 항목을 드래그 드롭해서
레이블에 놓으면 발생하는 이벤트

[03]

UI랑 핵심코드랑 떼어서 만드는게 좋다
핵심 코드가 UI랑 엮이게 되면
프로그램 디자인이 잘못됬다고 본다

잘못된 디자인 - 관리, 업데이트, 코드의 재사용성 떨어짐

계산기)
사용자에게 두 숫자를 어떻게 받을것인가?
> UI 사용자와 상호작용
>> 버튼, 텍스트박스, 등등

데이터 타입을
자동으로 바꾸지는 못한다
Convert를 이용해서
이를 바꾼다

int로 바꿀때는
기본적으로 32라고 생각해라

모든 데이터 타입에
ToString() 메서드가 있다
그만큼 string으로 바꿀일이 많다.

validation
텍스트 박스에
문자가 들어왔을때?
숫자가 들어가지 않았는데
계산을 했을때?
이럴때 에러가 발생된다.
이런 처리들을 다 해줘야 한다

받은 데이터가
내가 만든 프로그램에
적합한지? 를 판단하는 것
> validation

함수 = Function = 메서드
C# - 메서드
객체지향 - 클래스
클래스 > 메서드

Function
어떤 기능을 수행하는
프로그램 블록

ex) 밥통
밥을 하는 기능 - 핵심 기능
> 쌀 넣고
물 넣고
취사 버튼 누르고 - 함수 호출
시간이 지나면
밥 - 결과 완성
이게 하나의 기능
보온 기능
...

프로그래밍 내부에서
주고받은 모든 값은
데이터 타입

더하기 함수
두 수를 더해서
- int 형
결과값이 나온다
- int 형

현재는 함수가
너무 간단하고
줄이 짧기 때문에
왜쓰지? 하는 의문이 생긴다
하지만 함수를 여러번
호출하거나, 굉장히 복잡한
내용이 들어가거나
하게 되면 굉장히 효율적인
방식임을 알게 된다.

ex) 변기
변기의 기능
더러운 물을 흘려보내고 - 레버
깨끗한 물을 다시 저장함 - 플러시
- funtion
input : 대변, 소변, 아무것도 없을 수도 있음
> 레버를 그냥 내리면 물이 내려감
플러시 펑션
> 리턴값 없음

함수는 함수의 이름과
매개변수로 프로토 타입이
결정되는데
매개 변수가 다르다면
같은 이름의 함수를
몇개든 만들 수 있다
같은 이름으로 여러 함수가
정의 되는것 - 오버로딩

UI는 얼마든지
바뀔 수 있다
UI와 코드가 나누어져 있어야
UI가 바뀌어도
코드에 영향을 주지 않는다

[04]

If와 validation(유효성 검사)

If
bool
비교연산자
== 같다
1 == 1 true
!= 같지 않다
1 != 1 false
>
1 > 2 false
>=
<
<=

MessageBox

return 키워드
함수에서 빠져나오고 싶을때 사용
> 올바른 입력을 기다린다
return 타입이 있을경우
return type; 을 해줘야
동작이 가능

대부분의 function은 만들어져 있다
많이 쓸것 같은데 없다?
내가 만들면 됨.

입력 유효성 검사, 예외처리, 디버깅에
시간을 많이 쓰게 된다

사용자는 프로그램을 설계한 사람의
의도대로 사용하지 않는다
이때는 설계자의 의도대로 사용하게
막던가
아니면 원하는대로 쓸 수 있게
만들던가 해야한다

out 키워드

vaildation
> 현재는 텍스트로 입력을 받아서
이를 검사하고
계산 결과를 출력한다
이게 싫으면
UI를 변경하면 된다
>> 숫자 버튼을 만들어서
숫자를 입력 받는 식으로
UI 변경

focus - cursor 이동
사용자를 배려하는 코드
> 프로그래머 들이 
UI에 시간을 많이 쏟는다















