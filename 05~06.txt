[05]
if (조건식) //bool
{
	true 실행 블럭
}
	false 실행 블럭

ex)
public bool HasValue()
{
	return true;
}

if (HasValue()) //bool
{
	true 실행 블럭
}
	false 실행 블럭

#else
if (조건식) //bool
{
	//1
	true 실행 블럭 1 -> 3
}
else // false 시 2-> 3
{
	//2
}
	//3

#else if

#계산기
더하기 알고리즘
만드는 과정
Case
            // 숫자입력
            // + 버튼 - 첫번째 숫자 완성, 첫번째 변수에 저장.
            // 첫번째 루틴 외에는 다 같다
            // 어떻게 루틴을 줄일 수 있을까?

            // 첫번째 변수 = 0;
            // 이렇게 되면 첫번째 루틴을 삭제 할 수 있다.

            // 숫자 입력
            // 더하기 버튼 - 두번째 숫자 완성, 두번째 변수에 저장, 첫번째 변수와 두번째 변수를 합, 결과를 첫번째 변수에 다시 저장
            // 숫자 입력
            // 더하기 버튼
            // ... 반복

            // 루틴을 수정하는 과정
            // 숫자 입력
            // 더하기 버튼 - 숫자 완성, 변수와 숫자 합, 결과를 변수에 다시 저장

[06]
object sender

object - 모든 데이터형 다 저장이 가능
> class도 가능
> 모든 데이터 형으로 형변환 가능

sender.Text > 블가능
왜나면 sender는 object 형 이기 때문이다
이거를 버튼 타입으로 형변환 해줘야 한다.

Button NumButton = (Button) sender;

#enum 열거형 데이터 타입
int형과 같으나
사용하게 되면
상당히 큰 이점을
제공한다
리스트로 사용할 수 있음

#예외처리
내가 원하는 대로
동작하지 않을때
이를 해결한다

#등호버튼, 나누기 버튼
나누기의 경우
float이나 Double이 필요할듯 함

프로그래밍을 할 때는
정상적인 동작을 먼저 만들고 나서
유효성, 에러잡고, 에러 핸들링 - 디버깅
등에 많은 시간이 투자가 된다
하기싫은 작업이기도 하고
이게 얼마나 잘 되어있느냐에 따라
프로그램의 완성도가 결정된다

몇가지 안되는 문법으로 프로그램을
하나 만들었다.
